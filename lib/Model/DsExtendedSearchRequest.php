<?php
/**
 * DsExtendedSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infocenter-TEST
 *
 * Infocenter-TEST
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infocenter\Client\Model;

use \ArrayAccess;
use \Infocenter\Client\ObjectSerializer;

/**
 * DsExtendedSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsExtendedSearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExtendedSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'filters' => 'string[]',
'type' => 'string[]',
'datasource' => 'string[]',
'project' => 'string[]',
'parent_type' => 'string[]',
'campaign_tag' => 'string[]',
'facets' => '\Infocenter\Client\Model\DsFacetRequest[]',
'search_text' => 'string',
'search_fields' => 'string',
'select' => 'string',
'current_page' => 'int',
'results_per_page' => 'int',
'order_by' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'filters' => null,
'type' => null,
'datasource' => null,
'project' => null,
'parent_type' => null,
'campaign_tag' => null,
'facets' => null,
'search_text' => null,
'search_fields' => null,
'select' => null,
'current_page' => 'int32',
'results_per_page' => 'int32',
'order_by' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filters' => 'filters',
'type' => 'type',
'datasource' => 'datasource',
'project' => 'project',
'parent_type' => 'parentType',
'campaign_tag' => 'campaignTag',
'facets' => 'facets',
'search_text' => 'searchText',
'search_fields' => 'searchFields',
'select' => 'select',
'current_page' => 'currentPage',
'results_per_page' => 'resultsPerPage',
'order_by' => 'orderBy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filters' => 'setFilters',
'type' => 'setType',
'datasource' => 'setDatasource',
'project' => 'setProject',
'parent_type' => 'setParentType',
'campaign_tag' => 'setCampaignTag',
'facets' => 'setFacets',
'search_text' => 'setSearchText',
'search_fields' => 'setSearchFields',
'select' => 'setSelect',
'current_page' => 'setCurrentPage',
'results_per_page' => 'setResultsPerPage',
'order_by' => 'setOrderBy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filters' => 'getFilters',
'type' => 'getType',
'datasource' => 'getDatasource',
'project' => 'getProject',
'parent_type' => 'getParentType',
'campaign_tag' => 'getCampaignTag',
'facets' => 'getFacets',
'search_text' => 'getSearchText',
'search_fields' => 'getSearchFields',
'select' => 'getSelect',
'current_page' => 'getCurrentPage',
'results_per_page' => 'getResultsPerPage',
'order_by' => 'getOrderBy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['datasource'] = isset($data['datasource']) ? $data['datasource'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['parent_type'] = isset($data['parent_type']) ? $data['parent_type'] : null;
        $this->container['campaign_tag'] = isset($data['campaign_tag']) ? $data['campaign_tag'] : null;
        $this->container['facets'] = isset($data['facets']) ? $data['facets'] : null;
        $this->container['search_text'] = isset($data['search_text']) ? $data['search_text'] : null;
        $this->container['search_fields'] = isset($data['search_fields']) ? $data['search_fields'] : null;
        $this->container['select'] = isset($data['select']) ? $data['select'] : null;
        $this->container['current_page'] = isset($data['current_page']) ? $data['current_page'] : null;
        $this->container['results_per_page'] = isset($data['results_per_page']) ? $data['results_per_page'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filters
     *
     * @return string[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param string[] $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string[]
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string[] $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets datasource
     *
     * @return string[]
     */
    public function getDatasource()
    {
        return $this->container['datasource'];
    }

    /**
     * Sets datasource
     *
     * @param string[] $datasource datasource
     *
     * @return $this
     */
    public function setDatasource($datasource)
    {
        $this->container['datasource'] = $datasource;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string[]
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string[] $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets parent_type
     *
     * @return string[]
     */
    public function getParentType()
    {
        return $this->container['parent_type'];
    }

    /**
     * Sets parent_type
     *
     * @param string[] $parent_type parent_type
     *
     * @return $this
     */
    public function setParentType($parent_type)
    {
        $this->container['parent_type'] = $parent_type;

        return $this;
    }

    /**
     * Gets campaign_tag
     *
     * @return string[]
     */
    public function getCampaignTag()
    {
        return $this->container['campaign_tag'];
    }

    /**
     * Sets campaign_tag
     *
     * @param string[] $campaign_tag campaign_tag
     *
     * @return $this
     */
    public function setCampaignTag($campaign_tag)
    {
        $this->container['campaign_tag'] = $campaign_tag;

        return $this;
    }

    /**
     * Gets facets
     *
     * @return \Infocenter\Client\Model\DsFacetRequest[]
     */
    public function getFacets()
    {
        return $this->container['facets'];
    }

    /**
     * Sets facets
     *
     * @param \Infocenter\Client\Model\DsFacetRequest[] $facets facets
     *
     * @return $this
     */
    public function setFacets($facets)
    {
        $this->container['facets'] = $facets;

        return $this;
    }

    /**
     * Gets search_text
     *
     * @return string
     */
    public function getSearchText()
    {
        return $this->container['search_text'];
    }

    /**
     * Sets search_text
     *
     * @param string $search_text search_text
     *
     * @return $this
     */
    public function setSearchText($search_text)
    {
        $this->container['search_text'] = $search_text;

        return $this;
    }

    /**
     * Gets search_fields
     *
     * @return string
     */
    public function getSearchFields()
    {
        return $this->container['search_fields'];
    }

    /**
     * Sets search_fields
     *
     * @param string $search_fields search_fields
     *
     * @return $this
     */
    public function setSearchFields($search_fields)
    {
        $this->container['search_fields'] = $search_fields;

        return $this;
    }

    /**
     * Gets select
     *
     * @return string
     */
    public function getSelect()
    {
        return $this->container['select'];
    }

    /**
     * Sets select
     *
     * @param string $select select
     *
     * @return $this
     */
    public function setSelect($select)
    {
        $this->container['select'] = $select;

        return $this;
    }

    /**
     * Gets current_page
     *
     * @return int
     */
    public function getCurrentPage()
    {
        return $this->container['current_page'];
    }

    /**
     * Sets current_page
     *
     * @param int $current_page current_page
     *
     * @return $this
     */
    public function setCurrentPage($current_page)
    {
        $this->container['current_page'] = $current_page;

        return $this;
    }

    /**
     * Gets results_per_page
     *
     * @return int
     */
    public function getResultsPerPage()
    {
        return $this->container['results_per_page'];
    }

    /**
     * Sets results_per_page
     *
     * @param int $results_per_page results_per_page
     *
     * @return $this
     */
    public function setResultsPerPage($results_per_page)
    {
        $this->container['results_per_page'] = $results_per_page;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
