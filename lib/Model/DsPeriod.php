<?php
/**
 * DsPeriod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infocenter-TEST
 *
 * Infocenter-TEST
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infocenter\Client\Model;

use \ArrayAccess;
use \Infocenter\Client\ObjectSerializer;

/**
 * DsPeriod Class Doc Comment
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsPeriod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Period';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'icon_code' => 'int',
'icon_phrase' => 'string',
'has_precipitation' => 'bool',
'precipitation_type' => 'string',
'precipitation_intensity' => 'string',
'short_phrase' => 'string',
'long_phrase' => 'string',
'precipitation_probability' => 'int',
'thunderstorm_probability' => 'int',
'rain_probability' => 'int',
'snow_probability' => 'int',
'ice_probability' => 'int',
'wind' => '\Infocenter\Client\Model\DsWind',
'wind_gust' => '\Infocenter\Client\Model\DsWind',
'total_liquid' => '\Infocenter\Client\Model\DsUnitValue',
'rain' => '\Infocenter\Client\Model\DsUnitValue',
'snow' => '\Infocenter\Client\Model\DsUnitValue',
'ice' => '\Infocenter\Client\Model\DsUnitValue',
'hours_of_precipitation' => 'double',
'hours_of_rain' => 'double',
'hours_of_snow' => 'int',
'hours_of_ice' => 'int',
'cloud_cover' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'icon_code' => 'int32',
'icon_phrase' => null,
'has_precipitation' => null,
'precipitation_type' => null,
'precipitation_intensity' => null,
'short_phrase' => null,
'long_phrase' => null,
'precipitation_probability' => 'int32',
'thunderstorm_probability' => 'int32',
'rain_probability' => 'int32',
'snow_probability' => 'int32',
'ice_probability' => 'int32',
'wind' => null,
'wind_gust' => null,
'total_liquid' => null,
'rain' => null,
'snow' => null,
'ice' => null,
'hours_of_precipitation' => 'double',
'hours_of_rain' => 'double',
'hours_of_snow' => 'int32',
'hours_of_ice' => 'int32',
'cloud_cover' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'icon_code' => 'iconCode',
'icon_phrase' => 'iconPhrase',
'has_precipitation' => 'hasPrecipitation',
'precipitation_type' => 'precipitationType',
'precipitation_intensity' => 'precipitationIntensity',
'short_phrase' => 'shortPhrase',
'long_phrase' => 'longPhrase',
'precipitation_probability' => 'precipitationProbability',
'thunderstorm_probability' => 'thunderstormProbability',
'rain_probability' => 'rainProbability',
'snow_probability' => 'snowProbability',
'ice_probability' => 'iceProbability',
'wind' => 'wind',
'wind_gust' => 'windGust',
'total_liquid' => 'totalLiquid',
'rain' => 'rain',
'snow' => 'snow',
'ice' => 'ice',
'hours_of_precipitation' => 'hoursOfPrecipitation',
'hours_of_rain' => 'hoursOfRain',
'hours_of_snow' => 'hoursOfSnow',
'hours_of_ice' => 'hoursOfIce',
'cloud_cover' => 'cloudCover'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'icon_code' => 'setIconCode',
'icon_phrase' => 'setIconPhrase',
'has_precipitation' => 'setHasPrecipitation',
'precipitation_type' => 'setPrecipitationType',
'precipitation_intensity' => 'setPrecipitationIntensity',
'short_phrase' => 'setShortPhrase',
'long_phrase' => 'setLongPhrase',
'precipitation_probability' => 'setPrecipitationProbability',
'thunderstorm_probability' => 'setThunderstormProbability',
'rain_probability' => 'setRainProbability',
'snow_probability' => 'setSnowProbability',
'ice_probability' => 'setIceProbability',
'wind' => 'setWind',
'wind_gust' => 'setWindGust',
'total_liquid' => 'setTotalLiquid',
'rain' => 'setRain',
'snow' => 'setSnow',
'ice' => 'setIce',
'hours_of_precipitation' => 'setHoursOfPrecipitation',
'hours_of_rain' => 'setHoursOfRain',
'hours_of_snow' => 'setHoursOfSnow',
'hours_of_ice' => 'setHoursOfIce',
'cloud_cover' => 'setCloudCover'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'icon_code' => 'getIconCode',
'icon_phrase' => 'getIconPhrase',
'has_precipitation' => 'getHasPrecipitation',
'precipitation_type' => 'getPrecipitationType',
'precipitation_intensity' => 'getPrecipitationIntensity',
'short_phrase' => 'getShortPhrase',
'long_phrase' => 'getLongPhrase',
'precipitation_probability' => 'getPrecipitationProbability',
'thunderstorm_probability' => 'getThunderstormProbability',
'rain_probability' => 'getRainProbability',
'snow_probability' => 'getSnowProbability',
'ice_probability' => 'getIceProbability',
'wind' => 'getWind',
'wind_gust' => 'getWindGust',
'total_liquid' => 'getTotalLiquid',
'rain' => 'getRain',
'snow' => 'getSnow',
'ice' => 'getIce',
'hours_of_precipitation' => 'getHoursOfPrecipitation',
'hours_of_rain' => 'getHoursOfRain',
'hours_of_snow' => 'getHoursOfSnow',
'hours_of_ice' => 'getHoursOfIce',
'cloud_cover' => 'getCloudCover'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['icon_code'] = isset($data['icon_code']) ? $data['icon_code'] : null;
        $this->container['icon_phrase'] = isset($data['icon_phrase']) ? $data['icon_phrase'] : null;
        $this->container['has_precipitation'] = isset($data['has_precipitation']) ? $data['has_precipitation'] : null;
        $this->container['precipitation_type'] = isset($data['precipitation_type']) ? $data['precipitation_type'] : null;
        $this->container['precipitation_intensity'] = isset($data['precipitation_intensity']) ? $data['precipitation_intensity'] : null;
        $this->container['short_phrase'] = isset($data['short_phrase']) ? $data['short_phrase'] : null;
        $this->container['long_phrase'] = isset($data['long_phrase']) ? $data['long_phrase'] : null;
        $this->container['precipitation_probability'] = isset($data['precipitation_probability']) ? $data['precipitation_probability'] : null;
        $this->container['thunderstorm_probability'] = isset($data['thunderstorm_probability']) ? $data['thunderstorm_probability'] : null;
        $this->container['rain_probability'] = isset($data['rain_probability']) ? $data['rain_probability'] : null;
        $this->container['snow_probability'] = isset($data['snow_probability']) ? $data['snow_probability'] : null;
        $this->container['ice_probability'] = isset($data['ice_probability']) ? $data['ice_probability'] : null;
        $this->container['wind'] = isset($data['wind']) ? $data['wind'] : null;
        $this->container['wind_gust'] = isset($data['wind_gust']) ? $data['wind_gust'] : null;
        $this->container['total_liquid'] = isset($data['total_liquid']) ? $data['total_liquid'] : null;
        $this->container['rain'] = isset($data['rain']) ? $data['rain'] : null;
        $this->container['snow'] = isset($data['snow']) ? $data['snow'] : null;
        $this->container['ice'] = isset($data['ice']) ? $data['ice'] : null;
        $this->container['hours_of_precipitation'] = isset($data['hours_of_precipitation']) ? $data['hours_of_precipitation'] : null;
        $this->container['hours_of_rain'] = isset($data['hours_of_rain']) ? $data['hours_of_rain'] : null;
        $this->container['hours_of_snow'] = isset($data['hours_of_snow']) ? $data['hours_of_snow'] : null;
        $this->container['hours_of_ice'] = isset($data['hours_of_ice']) ? $data['hours_of_ice'] : null;
        $this->container['cloud_cover'] = isset($data['cloud_cover']) ? $data['cloud_cover'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets icon_code
     *
     * @return int
     */
    public function getIconCode()
    {
        return $this->container['icon_code'];
    }

    /**
     * Sets icon_code
     *
     * @param int $icon_code icon_code
     *
     * @return $this
     */
    public function setIconCode($icon_code)
    {
        $this->container['icon_code'] = $icon_code;

        return $this;
    }

    /**
     * Gets icon_phrase
     *
     * @return string
     */
    public function getIconPhrase()
    {
        return $this->container['icon_phrase'];
    }

    /**
     * Sets icon_phrase
     *
     * @param string $icon_phrase icon_phrase
     *
     * @return $this
     */
    public function setIconPhrase($icon_phrase)
    {
        $this->container['icon_phrase'] = $icon_phrase;

        return $this;
    }

    /**
     * Gets has_precipitation
     *
     * @return bool
     */
    public function getHasPrecipitation()
    {
        return $this->container['has_precipitation'];
    }

    /**
     * Sets has_precipitation
     *
     * @param bool $has_precipitation has_precipitation
     *
     * @return $this
     */
    public function setHasPrecipitation($has_precipitation)
    {
        $this->container['has_precipitation'] = $has_precipitation;

        return $this;
    }

    /**
     * Gets precipitation_type
     *
     * @return string
     */
    public function getPrecipitationType()
    {
        return $this->container['precipitation_type'];
    }

    /**
     * Sets precipitation_type
     *
     * @param string $precipitation_type precipitation_type
     *
     * @return $this
     */
    public function setPrecipitationType($precipitation_type)
    {
        $this->container['precipitation_type'] = $precipitation_type;

        return $this;
    }

    /**
     * Gets precipitation_intensity
     *
     * @return string
     */
    public function getPrecipitationIntensity()
    {
        return $this->container['precipitation_intensity'];
    }

    /**
     * Sets precipitation_intensity
     *
     * @param string $precipitation_intensity precipitation_intensity
     *
     * @return $this
     */
    public function setPrecipitationIntensity($precipitation_intensity)
    {
        $this->container['precipitation_intensity'] = $precipitation_intensity;

        return $this;
    }

    /**
     * Gets short_phrase
     *
     * @return string
     */
    public function getShortPhrase()
    {
        return $this->container['short_phrase'];
    }

    /**
     * Sets short_phrase
     *
     * @param string $short_phrase short_phrase
     *
     * @return $this
     */
    public function setShortPhrase($short_phrase)
    {
        $this->container['short_phrase'] = $short_phrase;

        return $this;
    }

    /**
     * Gets long_phrase
     *
     * @return string
     */
    public function getLongPhrase()
    {
        return $this->container['long_phrase'];
    }

    /**
     * Sets long_phrase
     *
     * @param string $long_phrase long_phrase
     *
     * @return $this
     */
    public function setLongPhrase($long_phrase)
    {
        $this->container['long_phrase'] = $long_phrase;

        return $this;
    }

    /**
     * Gets precipitation_probability
     *
     * @return int
     */
    public function getPrecipitationProbability()
    {
        return $this->container['precipitation_probability'];
    }

    /**
     * Sets precipitation_probability
     *
     * @param int $precipitation_probability precipitation_probability
     *
     * @return $this
     */
    public function setPrecipitationProbability($precipitation_probability)
    {
        $this->container['precipitation_probability'] = $precipitation_probability;

        return $this;
    }

    /**
     * Gets thunderstorm_probability
     *
     * @return int
     */
    public function getThunderstormProbability()
    {
        return $this->container['thunderstorm_probability'];
    }

    /**
     * Sets thunderstorm_probability
     *
     * @param int $thunderstorm_probability thunderstorm_probability
     *
     * @return $this
     */
    public function setThunderstormProbability($thunderstorm_probability)
    {
        $this->container['thunderstorm_probability'] = $thunderstorm_probability;

        return $this;
    }

    /**
     * Gets rain_probability
     *
     * @return int
     */
    public function getRainProbability()
    {
        return $this->container['rain_probability'];
    }

    /**
     * Sets rain_probability
     *
     * @param int $rain_probability rain_probability
     *
     * @return $this
     */
    public function setRainProbability($rain_probability)
    {
        $this->container['rain_probability'] = $rain_probability;

        return $this;
    }

    /**
     * Gets snow_probability
     *
     * @return int
     */
    public function getSnowProbability()
    {
        return $this->container['snow_probability'];
    }

    /**
     * Sets snow_probability
     *
     * @param int $snow_probability snow_probability
     *
     * @return $this
     */
    public function setSnowProbability($snow_probability)
    {
        $this->container['snow_probability'] = $snow_probability;

        return $this;
    }

    /**
     * Gets ice_probability
     *
     * @return int
     */
    public function getIceProbability()
    {
        return $this->container['ice_probability'];
    }

    /**
     * Sets ice_probability
     *
     * @param int $ice_probability ice_probability
     *
     * @return $this
     */
    public function setIceProbability($ice_probability)
    {
        $this->container['ice_probability'] = $ice_probability;

        return $this;
    }

    /**
     * Gets wind
     *
     * @return \Infocenter\Client\Model\DsWind
     */
    public function getWind()
    {
        return $this->container['wind'];
    }

    /**
     * Sets wind
     *
     * @param \Infocenter\Client\Model\DsWind $wind wind
     *
     * @return $this
     */
    public function setWind($wind)
    {
        $this->container['wind'] = $wind;

        return $this;
    }

    /**
     * Gets wind_gust
     *
     * @return \Infocenter\Client\Model\DsWind
     */
    public function getWindGust()
    {
        return $this->container['wind_gust'];
    }

    /**
     * Sets wind_gust
     *
     * @param \Infocenter\Client\Model\DsWind $wind_gust wind_gust
     *
     * @return $this
     */
    public function setWindGust($wind_gust)
    {
        $this->container['wind_gust'] = $wind_gust;

        return $this;
    }

    /**
     * Gets total_liquid
     *
     * @return \Infocenter\Client\Model\DsUnitValue
     */
    public function getTotalLiquid()
    {
        return $this->container['total_liquid'];
    }

    /**
     * Sets total_liquid
     *
     * @param \Infocenter\Client\Model\DsUnitValue $total_liquid total_liquid
     *
     * @return $this
     */
    public function setTotalLiquid($total_liquid)
    {
        $this->container['total_liquid'] = $total_liquid;

        return $this;
    }

    /**
     * Gets rain
     *
     * @return \Infocenter\Client\Model\DsUnitValue
     */
    public function getRain()
    {
        return $this->container['rain'];
    }

    /**
     * Sets rain
     *
     * @param \Infocenter\Client\Model\DsUnitValue $rain rain
     *
     * @return $this
     */
    public function setRain($rain)
    {
        $this->container['rain'] = $rain;

        return $this;
    }

    /**
     * Gets snow
     *
     * @return \Infocenter\Client\Model\DsUnitValue
     */
    public function getSnow()
    {
        return $this->container['snow'];
    }

    /**
     * Sets snow
     *
     * @param \Infocenter\Client\Model\DsUnitValue $snow snow
     *
     * @return $this
     */
    public function setSnow($snow)
    {
        $this->container['snow'] = $snow;

        return $this;
    }

    /**
     * Gets ice
     *
     * @return \Infocenter\Client\Model\DsUnitValue
     */
    public function getIce()
    {
        return $this->container['ice'];
    }

    /**
     * Sets ice
     *
     * @param \Infocenter\Client\Model\DsUnitValue $ice ice
     *
     * @return $this
     */
    public function setIce($ice)
    {
        $this->container['ice'] = $ice;

        return $this;
    }

    /**
     * Gets hours_of_precipitation
     *
     * @return double
     */
    public function getHoursOfPrecipitation()
    {
        return $this->container['hours_of_precipitation'];
    }

    /**
     * Sets hours_of_precipitation
     *
     * @param double $hours_of_precipitation hours_of_precipitation
     *
     * @return $this
     */
    public function setHoursOfPrecipitation($hours_of_precipitation)
    {
        $this->container['hours_of_precipitation'] = $hours_of_precipitation;

        return $this;
    }

    /**
     * Gets hours_of_rain
     *
     * @return double
     */
    public function getHoursOfRain()
    {
        return $this->container['hours_of_rain'];
    }

    /**
     * Sets hours_of_rain
     *
     * @param double $hours_of_rain hours_of_rain
     *
     * @return $this
     */
    public function setHoursOfRain($hours_of_rain)
    {
        $this->container['hours_of_rain'] = $hours_of_rain;

        return $this;
    }

    /**
     * Gets hours_of_snow
     *
     * @return int
     */
    public function getHoursOfSnow()
    {
        return $this->container['hours_of_snow'];
    }

    /**
     * Sets hours_of_snow
     *
     * @param int $hours_of_snow hours_of_snow
     *
     * @return $this
     */
    public function setHoursOfSnow($hours_of_snow)
    {
        $this->container['hours_of_snow'] = $hours_of_snow;

        return $this;
    }

    /**
     * Gets hours_of_ice
     *
     * @return int
     */
    public function getHoursOfIce()
    {
        return $this->container['hours_of_ice'];
    }

    /**
     * Sets hours_of_ice
     *
     * @param int $hours_of_ice hours_of_ice
     *
     * @return $this
     */
    public function setHoursOfIce($hours_of_ice)
    {
        $this->container['hours_of_ice'] = $hours_of_ice;

        return $this;
    }

    /**
     * Gets cloud_cover
     *
     * @return int
     */
    public function getCloudCover()
    {
        return $this->container['cloud_cover'];
    }

    /**
     * Sets cloud_cover
     *
     * @param int $cloud_cover cloud_cover
     *
     * @return $this
     */
    public function setCloudCover($cloud_cover)
    {
        $this->container['cloud_cover'] = $cloud_cover;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
