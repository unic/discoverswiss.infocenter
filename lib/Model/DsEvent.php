<?php
/**
 * DsEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infocenter-TEST-V2
 *
 * Infocenter API test-v2
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infocenter\Client\Model;

use \ArrayAccess;
use \Infocenter\Client\ObjectSerializer;

/**
 * DsEvent Class Doc Comment
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organizer' => '\Infocenter\Client\Model\DsOrganization',
'start_date' => '\DateTime',
'end_date' => '\DateTime',
'event_schedule' => '\Infocenter\Client\Model\DsSchedule[]',
'min_start_date' => '\DateTime',
'max_start_date' => '\DateTime',
'location' => '\Infocenter\Client\Model\DsPlaceMember',
'in_language' => 'string[]',
'photo' => '\Infocenter\Client\Model\DsImageObjectSimplex[]',
'attachment' => '\Infocenter\Client\Model\DsMediaObjectSimplex[]',
'price_information' => 'string',
'ticketing_contact' => 'string',
'opening_hours' => 'string',
'category' => '\Infocenter\Client\Model\DsCategorySimplex[]',
'contained_in_place' => '\Infocenter\Client\Model\DsPlaceSimplex[]',
'id' => 'string',
'identifier' => 'string',
'datasource' => 'string',
'data_governance' => '\Infocenter\Client\Model\DsDataGovernance',
'last_modified' => '\DateTime',
'available_data_language' => 'string[]',
'auto_translated_data' => 'bool',
'alternate_name' => 'string',
'description' => 'string',
'disambiguating_description' => 'string',
'image' => '\Infocenter\Client\Model\DsImageObjectSimplex',
'same_as' => 'string',
'url' => 'string',
'additional_type' => 'string',
'link' => '\Infocenter\Client\Model\DsLink[]',
'name' => 'string',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organizer' => null,
'start_date' => 'date-time',
'end_date' => 'date-time',
'event_schedule' => null,
'min_start_date' => 'date-time',
'max_start_date' => 'date-time',
'location' => null,
'in_language' => null,
'photo' => null,
'attachment' => null,
'price_information' => null,
'ticketing_contact' => null,
'opening_hours' => null,
'category' => null,
'contained_in_place' => null,
'id' => null,
'identifier' => null,
'datasource' => null,
'data_governance' => null,
'last_modified' => 'date-time',
'available_data_language' => null,
'auto_translated_data' => null,
'alternate_name' => null,
'description' => null,
'disambiguating_description' => null,
'image' => null,
'same_as' => null,
'url' => null,
'additional_type' => null,
'link' => null,
'name' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organizer' => 'organizer',
'start_date' => 'startDate',
'end_date' => 'endDate',
'event_schedule' => 'eventSchedule',
'min_start_date' => 'minStartDate',
'max_start_date' => 'maxStartDate',
'location' => 'location',
'in_language' => 'inLanguage',
'photo' => 'photo',
'attachment' => 'attachment',
'price_information' => 'priceInformation',
'ticketing_contact' => 'ticketingContact',
'opening_hours' => 'openingHours',
'category' => 'category',
'contained_in_place' => 'containedInPlace',
'id' => '@id',
'identifier' => 'identifier',
'datasource' => 'datasource',
'data_governance' => 'dataGovernance',
'last_modified' => 'lastModified',
'available_data_language' => 'availableDataLanguage',
'auto_translated_data' => 'autoTranslatedData',
'alternate_name' => 'alternateName',
'description' => 'description',
'disambiguating_description' => 'disambiguatingDescription',
'image' => 'image',
'same_as' => 'sameAs',
'url' => 'url',
'additional_type' => 'additionalType',
'link' => 'link',
'name' => 'name',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organizer' => 'setOrganizer',
'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'event_schedule' => 'setEventSchedule',
'min_start_date' => 'setMinStartDate',
'max_start_date' => 'setMaxStartDate',
'location' => 'setLocation',
'in_language' => 'setInLanguage',
'photo' => 'setPhoto',
'attachment' => 'setAttachment',
'price_information' => 'setPriceInformation',
'ticketing_contact' => 'setTicketingContact',
'opening_hours' => 'setOpeningHours',
'category' => 'setCategory',
'contained_in_place' => 'setContainedInPlace',
'id' => 'setId',
'identifier' => 'setIdentifier',
'datasource' => 'setDatasource',
'data_governance' => 'setDataGovernance',
'last_modified' => 'setLastModified',
'available_data_language' => 'setAvailableDataLanguage',
'auto_translated_data' => 'setAutoTranslatedData',
'alternate_name' => 'setAlternateName',
'description' => 'setDescription',
'disambiguating_description' => 'setDisambiguatingDescription',
'image' => 'setImage',
'same_as' => 'setSameAs',
'url' => 'setUrl',
'additional_type' => 'setAdditionalType',
'link' => 'setLink',
'name' => 'setName',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organizer' => 'getOrganizer',
'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'event_schedule' => 'getEventSchedule',
'min_start_date' => 'getMinStartDate',
'max_start_date' => 'getMaxStartDate',
'location' => 'getLocation',
'in_language' => 'getInLanguage',
'photo' => 'getPhoto',
'attachment' => 'getAttachment',
'price_information' => 'getPriceInformation',
'ticketing_contact' => 'getTicketingContact',
'opening_hours' => 'getOpeningHours',
'category' => 'getCategory',
'contained_in_place' => 'getContainedInPlace',
'id' => 'getId',
'identifier' => 'getIdentifier',
'datasource' => 'getDatasource',
'data_governance' => 'getDataGovernance',
'last_modified' => 'getLastModified',
'available_data_language' => 'getAvailableDataLanguage',
'auto_translated_data' => 'getAutoTranslatedData',
'alternate_name' => 'getAlternateName',
'description' => 'getDescription',
'disambiguating_description' => 'getDisambiguatingDescription',
'image' => 'getImage',
'same_as' => 'getSameAs',
'url' => 'getUrl',
'additional_type' => 'getAdditionalType',
'link' => 'getLink',
'name' => 'getName',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organizer'] = isset($data['organizer']) ? $data['organizer'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['event_schedule'] = isset($data['event_schedule']) ? $data['event_schedule'] : null;
        $this->container['min_start_date'] = isset($data['min_start_date']) ? $data['min_start_date'] : null;
        $this->container['max_start_date'] = isset($data['max_start_date']) ? $data['max_start_date'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['in_language'] = isset($data['in_language']) ? $data['in_language'] : null;
        $this->container['photo'] = isset($data['photo']) ? $data['photo'] : null;
        $this->container['attachment'] = isset($data['attachment']) ? $data['attachment'] : null;
        $this->container['price_information'] = isset($data['price_information']) ? $data['price_information'] : null;
        $this->container['ticketing_contact'] = isset($data['ticketing_contact']) ? $data['ticketing_contact'] : null;
        $this->container['opening_hours'] = isset($data['opening_hours']) ? $data['opening_hours'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['contained_in_place'] = isset($data['contained_in_place']) ? $data['contained_in_place'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['datasource'] = isset($data['datasource']) ? $data['datasource'] : null;
        $this->container['data_governance'] = isset($data['data_governance']) ? $data['data_governance'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['available_data_language'] = isset($data['available_data_language']) ? $data['available_data_language'] : null;
        $this->container['auto_translated_data'] = isset($data['auto_translated_data']) ? $data['auto_translated_data'] : null;
        $this->container['alternate_name'] = isset($data['alternate_name']) ? $data['alternate_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['disambiguating_description'] = isset($data['disambiguating_description']) ? $data['disambiguating_description'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['same_as'] = isset($data['same_as']) ? $data['same_as'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['additional_type'] = isset($data['additional_type']) ? $data['additional_type'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organizer
     *
     * @return \Infocenter\Client\Model\DsOrganization
     */
    public function getOrganizer()
    {
        return $this->container['organizer'];
    }

    /**
     * Sets organizer
     *
     * @param \Infocenter\Client\Model\DsOrganization $organizer organizer
     *
     * @return $this
     */
    public function setOrganizer($organizer)
    {
        $this->container['organizer'] = $organizer;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets event_schedule
     *
     * @return \Infocenter\Client\Model\DsSchedule[]
     */
    public function getEventSchedule()
    {
        return $this->container['event_schedule'];
    }

    /**
     * Sets event_schedule
     *
     * @param \Infocenter\Client\Model\DsSchedule[] $event_schedule event_schedule
     *
     * @return $this
     */
    public function setEventSchedule($event_schedule)
    {
        $this->container['event_schedule'] = $event_schedule;

        return $this;
    }

    /**
     * Gets min_start_date
     *
     * @return \DateTime
     */
    public function getMinStartDate()
    {
        return $this->container['min_start_date'];
    }

    /**
     * Sets min_start_date
     *
     * @param \DateTime $min_start_date min_start_date
     *
     * @return $this
     */
    public function setMinStartDate($min_start_date)
    {
        $this->container['min_start_date'] = $min_start_date;

        return $this;
    }

    /**
     * Gets max_start_date
     *
     * @return \DateTime
     */
    public function getMaxStartDate()
    {
        return $this->container['max_start_date'];
    }

    /**
     * Sets max_start_date
     *
     * @param \DateTime $max_start_date max_start_date
     *
     * @return $this
     */
    public function setMaxStartDate($max_start_date)
    {
        $this->container['max_start_date'] = $max_start_date;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Infocenter\Client\Model\DsPlaceMember
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Infocenter\Client\Model\DsPlaceMember $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets in_language
     *
     * @return string[]
     */
    public function getInLanguage()
    {
        return $this->container['in_language'];
    }

    /**
     * Sets in_language
     *
     * @param string[] $in_language in_language
     *
     * @return $this
     */
    public function setInLanguage($in_language)
    {
        $this->container['in_language'] = $in_language;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return \Infocenter\Client\Model\DsImageObjectSimplex[]
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param \Infocenter\Client\Model\DsImageObjectSimplex[] $photo photo
     *
     * @return $this
     */
    public function setPhoto($photo)
    {
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return \Infocenter\Client\Model\DsMediaObjectSimplex[]
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param \Infocenter\Client\Model\DsMediaObjectSimplex[] $attachment attachment
     *
     * @return $this
     */
    public function setAttachment($attachment)
    {
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets price_information
     *
     * @return string
     */
    public function getPriceInformation()
    {
        return $this->container['price_information'];
    }

    /**
     * Sets price_information
     *
     * @param string $price_information price_information
     *
     * @return $this
     */
    public function setPriceInformation($price_information)
    {
        $this->container['price_information'] = $price_information;

        return $this;
    }

    /**
     * Gets ticketing_contact
     *
     * @return string
     */
    public function getTicketingContact()
    {
        return $this->container['ticketing_contact'];
    }

    /**
     * Sets ticketing_contact
     *
     * @param string $ticketing_contact ticketing_contact
     *
     * @return $this
     */
    public function setTicketingContact($ticketing_contact)
    {
        $this->container['ticketing_contact'] = $ticketing_contact;

        return $this;
    }

    /**
     * Gets opening_hours
     *
     * @return string
     */
    public function getOpeningHours()
    {
        return $this->container['opening_hours'];
    }

    /**
     * Sets opening_hours
     *
     * @param string $opening_hours opening_hours
     *
     * @return $this
     */
    public function setOpeningHours($opening_hours)
    {
        $this->container['opening_hours'] = $opening_hours;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Infocenter\Client\Model\DsCategorySimplex[]
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Infocenter\Client\Model\DsCategorySimplex[] $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets contained_in_place
     *
     * @return \Infocenter\Client\Model\DsPlaceSimplex[]
     */
    public function getContainedInPlace()
    {
        return $this->container['contained_in_place'];
    }

    /**
     * Sets contained_in_place
     *
     * @param \Infocenter\Client\Model\DsPlaceSimplex[] $contained_in_place contained_in_place
     *
     * @return $this
     */
    public function setContainedInPlace($contained_in_place)
    {
        $this->container['contained_in_place'] = $contained_in_place;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets datasource
     *
     * @return string
     */
    public function getDatasource()
    {
        return $this->container['datasource'];
    }

    /**
     * Sets datasource
     *
     * @param string $datasource datasource
     *
     * @return $this
     */
    public function setDatasource($datasource)
    {
        $this->container['datasource'] = $datasource;

        return $this;
    }

    /**
     * Gets data_governance
     *
     * @return \Infocenter\Client\Model\DsDataGovernance
     */
    public function getDataGovernance()
    {
        return $this->container['data_governance'];
    }

    /**
     * Sets data_governance
     *
     * @param \Infocenter\Client\Model\DsDataGovernance $data_governance data_governance
     *
     * @return $this
     */
    public function setDataGovernance($data_governance)
    {
        $this->container['data_governance'] = $data_governance;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets available_data_language
     *
     * @return string[]
     */
    public function getAvailableDataLanguage()
    {
        return $this->container['available_data_language'];
    }

    /**
     * Sets available_data_language
     *
     * @param string[] $available_data_language available_data_language
     *
     * @return $this
     */
    public function setAvailableDataLanguage($available_data_language)
    {
        $this->container['available_data_language'] = $available_data_language;

        return $this;
    }

    /**
     * Gets auto_translated_data
     *
     * @return bool
     */
    public function getAutoTranslatedData()
    {
        return $this->container['auto_translated_data'];
    }

    /**
     * Sets auto_translated_data
     *
     * @param bool $auto_translated_data auto_translated_data
     *
     * @return $this
     */
    public function setAutoTranslatedData($auto_translated_data)
    {
        $this->container['auto_translated_data'] = $auto_translated_data;

        return $this;
    }

    /**
     * Gets alternate_name
     *
     * @return string
     */
    public function getAlternateName()
    {
        return $this->container['alternate_name'];
    }

    /**
     * Sets alternate_name
     *
     * @param string $alternate_name alternate_name
     *
     * @return $this
     */
    public function setAlternateName($alternate_name)
    {
        $this->container['alternate_name'] = $alternate_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disambiguating_description
     *
     * @return string
     */
    public function getDisambiguatingDescription()
    {
        return $this->container['disambiguating_description'];
    }

    /**
     * Sets disambiguating_description
     *
     * @param string $disambiguating_description disambiguating_description
     *
     * @return $this
     */
    public function setDisambiguatingDescription($disambiguating_description)
    {
        $this->container['disambiguating_description'] = $disambiguating_description;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Infocenter\Client\Model\DsImageObjectSimplex
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Infocenter\Client\Model\DsImageObjectSimplex $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets same_as
     *
     * @return string
     */
    public function getSameAs()
    {
        return $this->container['same_as'];
    }

    /**
     * Sets same_as
     *
     * @param string $same_as same_as
     *
     * @return $this
     */
    public function setSameAs($same_as)
    {
        $this->container['same_as'] = $same_as;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets additional_type
     *
     * @return string
     */
    public function getAdditionalType()
    {
        return $this->container['additional_type'];
    }

    /**
     * Sets additional_type
     *
     * @param string $additional_type additional_type
     *
     * @return $this
     */
    public function setAdditionalType($additional_type)
    {
        $this->container['additional_type'] = $additional_type;

        return $this;
    }

    /**
     * Gets link
     *
     * @return \Infocenter\Client\Model\DsLink[]
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param \Infocenter\Client\Model\DsLink[] $link link
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
