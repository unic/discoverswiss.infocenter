<?php
/**
 * DsSnowConditionReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infocenter-TEST-V2
 *
 * Infocenter API test-v2
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infocenter\Client\Model;

use \ArrayAccess;
use \Infocenter\Client\ObjectSerializer;

/**
 * DsSnowConditionReport Class Doc Comment
 *
 * @category Class
 * @description Report of the snow conditions of a ski resort or ski slope.
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsSnowConditionReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SnowConditionReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fresh_fallen_snow' => '\Infocenter\Client\Model\DsQuantitativeValue',
'last_snowfall' => '\DateTime',
'max_snow_height' => '\Infocenter\Client\Model\DsQuantitativeValue',
'min_snow_height' => '\Infocenter\Client\Model\DsQuantitativeValue',
'snow_condition' => 'string',
'snow_type' => 'string',
'report' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fresh_fallen_snow' => null,
'last_snowfall' => 'date-time',
'max_snow_height' => null,
'min_snow_height' => null,
'snow_condition' => null,
'snow_type' => null,
'report' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fresh_fallen_snow' => 'freshFallenSnow',
'last_snowfall' => 'lastSnowfall',
'max_snow_height' => 'maxSnowHeight',
'min_snow_height' => 'minSnowHeight',
'snow_condition' => 'snowCondition',
'snow_type' => 'snowType',
'report' => 'report'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fresh_fallen_snow' => 'setFreshFallenSnow',
'last_snowfall' => 'setLastSnowfall',
'max_snow_height' => 'setMaxSnowHeight',
'min_snow_height' => 'setMinSnowHeight',
'snow_condition' => 'setSnowCondition',
'snow_type' => 'setSnowType',
'report' => 'setReport'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fresh_fallen_snow' => 'getFreshFallenSnow',
'last_snowfall' => 'getLastSnowfall',
'max_snow_height' => 'getMaxSnowHeight',
'min_snow_height' => 'getMinSnowHeight',
'snow_condition' => 'getSnowCondition',
'snow_type' => 'getSnowType',
'report' => 'getReport'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fresh_fallen_snow'] = isset($data['fresh_fallen_snow']) ? $data['fresh_fallen_snow'] : null;
        $this->container['last_snowfall'] = isset($data['last_snowfall']) ? $data['last_snowfall'] : null;
        $this->container['max_snow_height'] = isset($data['max_snow_height']) ? $data['max_snow_height'] : null;
        $this->container['min_snow_height'] = isset($data['min_snow_height']) ? $data['min_snow_height'] : null;
        $this->container['snow_condition'] = isset($data['snow_condition']) ? $data['snow_condition'] : null;
        $this->container['snow_type'] = isset($data['snow_type']) ? $data['snow_type'] : null;
        $this->container['report'] = isset($data['report']) ? $data['report'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fresh_fallen_snow
     *
     * @return \Infocenter\Client\Model\DsQuantitativeValue
     */
    public function getFreshFallenSnow()
    {
        return $this->container['fresh_fallen_snow'];
    }

    /**
     * Sets fresh_fallen_snow
     *
     * @param \Infocenter\Client\Model\DsQuantitativeValue $fresh_fallen_snow fresh_fallen_snow
     *
     * @return $this
     */
    public function setFreshFallenSnow($fresh_fallen_snow)
    {
        $this->container['fresh_fallen_snow'] = $fresh_fallen_snow;

        return $this;
    }

    /**
     * Gets last_snowfall
     *
     * @return \DateTime
     */
    public function getLastSnowfall()
    {
        return $this->container['last_snowfall'];
    }

    /**
     * Sets last_snowfall
     *
     * @param \DateTime $last_snowfall Date of last snow fall. (local date)
     *
     * @return $this
     */
    public function setLastSnowfall($last_snowfall)
    {
        $this->container['last_snowfall'] = $last_snowfall;

        return $this;
    }

    /**
     * Gets max_snow_height
     *
     * @return \Infocenter\Client\Model\DsQuantitativeValue
     */
    public function getMaxSnowHeight()
    {
        return $this->container['max_snow_height'];
    }

    /**
     * Sets max_snow_height
     *
     * @param \Infocenter\Client\Model\DsQuantitativeValue $max_snow_height max_snow_height
     *
     * @return $this
     */
    public function setMaxSnowHeight($max_snow_height)
    {
        $this->container['max_snow_height'] = $max_snow_height;

        return $this;
    }

    /**
     * Gets min_snow_height
     *
     * @return \Infocenter\Client\Model\DsQuantitativeValue
     */
    public function getMinSnowHeight()
    {
        return $this->container['min_snow_height'];
    }

    /**
     * Sets min_snow_height
     *
     * @param \Infocenter\Client\Model\DsQuantitativeValue $min_snow_height min_snow_height
     *
     * @return $this
     */
    public function setMinSnowHeight($min_snow_height)
    {
        $this->container['min_snow_height'] = $min_snow_height;

        return $this;
    }

    /**
     * Gets snow_condition
     *
     * @return string
     */
    public function getSnowCondition()
    {
        return $this->container['snow_condition'];
    }

    /**
     * Sets snow_condition
     *
     * @param string $snow_condition Current snow conditions (e.g., fresh, wet, ...)
     *
     * @return $this
     */
    public function setSnowCondition($snow_condition)
    {
        $this->container['snow_condition'] = $snow_condition;

        return $this;
    }

    /**
     * Gets snow_type
     *
     * @return string
     */
    public function getSnowType()
    {
        return $this->container['snow_type'];
    }

    /**
     * Sets snow_type
     *
     * @param string $snow_type Type of snow (e.g., artificial, ...)
     *
     * @return $this
     */
    public function setSnowType($snow_type)
    {
        $this->container['snow_type'] = $snow_type;

        return $this;
    }

    /**
     * Gets report
     *
     * @return string
     */
    public function getReport()
    {
        return $this->container['report'];
    }

    /**
     * Sets report
     *
     * @param string $report Text snow report. Multilingual
     *
     * @return $this
     */
    public function setReport($report)
    {
        $this->container['report'] = $report;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
