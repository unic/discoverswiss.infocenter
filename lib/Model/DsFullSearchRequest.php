<?php
/**
 * DsFullSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infocenter-TEST-V2
 *
 * Infocenter API test-v2
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infocenter\Client\Model;

use \ArrayAccess;
use \Infocenter\Client\ObjectSerializer;

/**
 * DsFullSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsFullSearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FullSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category_tree' => 'string[]',
'tag' => 'string[]',
'contained_in_place' => 'string[]',
'address_locality' => 'string[]',
'address_postal_code' => 'string[]',
'time' => 'string[]',
'state' => 'string[]',
'rating_condition' => 'string[]',
'rating_difficulty' => 'string[]',
'elevation_ascent' => 'string[]',
'elevation_descent' => 'string[]',
'elevation_min_altitude' => 'string[]',
'elevation_max_altitude' => 'string[]',
'season' => 'string[]',
'type' => 'string[]',
'combined_type' => 'string[]',
'combined_type_tree' => 'string[]',
'leaf_type' => 'string[]',
'filters' => 'string[]',
'datasource' => 'string[]',
'project' => 'string[]',
'campaign_tag' => 'string[]',
'profile_tag' => 'string[]',
'all_tag' => 'string[]',
'category' => 'string[]',
'facets' => '\Infocenter\Client\Model\DsFacetRequest[]',
'scoring_tag' => 'string[]',
'search_text' => 'string',
'search_fields' => 'string',
'select' => 'string',
'current_page' => 'int',
'results_per_page' => 'int',
'order_by' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'category_tree' => null,
'tag' => null,
'contained_in_place' => null,
'address_locality' => null,
'address_postal_code' => null,
'time' => null,
'state' => null,
'rating_condition' => null,
'rating_difficulty' => null,
'elevation_ascent' => null,
'elevation_descent' => null,
'elevation_min_altitude' => null,
'elevation_max_altitude' => null,
'season' => null,
'type' => null,
'combined_type' => null,
'combined_type_tree' => null,
'leaf_type' => null,
'filters' => null,
'datasource' => null,
'project' => null,
'campaign_tag' => null,
'profile_tag' => null,
'all_tag' => null,
'category' => null,
'facets' => null,
'scoring_tag' => null,
'search_text' => null,
'search_fields' => null,
'select' => null,
'current_page' => 'int32',
'results_per_page' => 'int32',
'order_by' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category_tree' => 'categoryTree',
'tag' => 'tag',
'contained_in_place' => 'containedInPlace',
'address_locality' => 'addressLocality',
'address_postal_code' => 'addressPostalCode',
'time' => 'time',
'state' => 'state',
'rating_condition' => 'ratingCondition',
'rating_difficulty' => 'ratingDifficulty',
'elevation_ascent' => 'elevationAscent',
'elevation_descent' => 'elevationDescent',
'elevation_min_altitude' => 'elevationMinAltitude',
'elevation_max_altitude' => 'elevationMaxAltitude',
'season' => 'season',
'type' => 'type',
'combined_type' => 'combinedType',
'combined_type_tree' => 'combinedTypeTree',
'leaf_type' => 'leafType',
'filters' => 'filters',
'datasource' => 'datasource',
'project' => 'project',
'campaign_tag' => 'campaignTag',
'profile_tag' => 'profileTag',
'all_tag' => 'allTag',
'category' => 'category',
'facets' => 'facets',
'scoring_tag' => 'scoringTag',
'search_text' => 'searchText',
'search_fields' => 'searchFields',
'select' => 'select',
'current_page' => 'currentPage',
'results_per_page' => 'resultsPerPage',
'order_by' => 'orderBy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category_tree' => 'setCategoryTree',
'tag' => 'setTag',
'contained_in_place' => 'setContainedInPlace',
'address_locality' => 'setAddressLocality',
'address_postal_code' => 'setAddressPostalCode',
'time' => 'setTime',
'state' => 'setState',
'rating_condition' => 'setRatingCondition',
'rating_difficulty' => 'setRatingDifficulty',
'elevation_ascent' => 'setElevationAscent',
'elevation_descent' => 'setElevationDescent',
'elevation_min_altitude' => 'setElevationMinAltitude',
'elevation_max_altitude' => 'setElevationMaxAltitude',
'season' => 'setSeason',
'type' => 'setType',
'combined_type' => 'setCombinedType',
'combined_type_tree' => 'setCombinedTypeTree',
'leaf_type' => 'setLeafType',
'filters' => 'setFilters',
'datasource' => 'setDatasource',
'project' => 'setProject',
'campaign_tag' => 'setCampaignTag',
'profile_tag' => 'setProfileTag',
'all_tag' => 'setAllTag',
'category' => 'setCategory',
'facets' => 'setFacets',
'scoring_tag' => 'setScoringTag',
'search_text' => 'setSearchText',
'search_fields' => 'setSearchFields',
'select' => 'setSelect',
'current_page' => 'setCurrentPage',
'results_per_page' => 'setResultsPerPage',
'order_by' => 'setOrderBy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category_tree' => 'getCategoryTree',
'tag' => 'getTag',
'contained_in_place' => 'getContainedInPlace',
'address_locality' => 'getAddressLocality',
'address_postal_code' => 'getAddressPostalCode',
'time' => 'getTime',
'state' => 'getState',
'rating_condition' => 'getRatingCondition',
'rating_difficulty' => 'getRatingDifficulty',
'elevation_ascent' => 'getElevationAscent',
'elevation_descent' => 'getElevationDescent',
'elevation_min_altitude' => 'getElevationMinAltitude',
'elevation_max_altitude' => 'getElevationMaxAltitude',
'season' => 'getSeason',
'type' => 'getType',
'combined_type' => 'getCombinedType',
'combined_type_tree' => 'getCombinedTypeTree',
'leaf_type' => 'getLeafType',
'filters' => 'getFilters',
'datasource' => 'getDatasource',
'project' => 'getProject',
'campaign_tag' => 'getCampaignTag',
'profile_tag' => 'getProfileTag',
'all_tag' => 'getAllTag',
'category' => 'getCategory',
'facets' => 'getFacets',
'scoring_tag' => 'getScoringTag',
'search_text' => 'getSearchText',
'search_fields' => 'getSearchFields',
'select' => 'getSelect',
'current_page' => 'getCurrentPage',
'results_per_page' => 'getResultsPerPage',
'order_by' => 'getOrderBy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category_tree'] = isset($data['category_tree']) ? $data['category_tree'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['contained_in_place'] = isset($data['contained_in_place']) ? $data['contained_in_place'] : null;
        $this->container['address_locality'] = isset($data['address_locality']) ? $data['address_locality'] : null;
        $this->container['address_postal_code'] = isset($data['address_postal_code']) ? $data['address_postal_code'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['rating_condition'] = isset($data['rating_condition']) ? $data['rating_condition'] : null;
        $this->container['rating_difficulty'] = isset($data['rating_difficulty']) ? $data['rating_difficulty'] : null;
        $this->container['elevation_ascent'] = isset($data['elevation_ascent']) ? $data['elevation_ascent'] : null;
        $this->container['elevation_descent'] = isset($data['elevation_descent']) ? $data['elevation_descent'] : null;
        $this->container['elevation_min_altitude'] = isset($data['elevation_min_altitude']) ? $data['elevation_min_altitude'] : null;
        $this->container['elevation_max_altitude'] = isset($data['elevation_max_altitude']) ? $data['elevation_max_altitude'] : null;
        $this->container['season'] = isset($data['season']) ? $data['season'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['combined_type'] = isset($data['combined_type']) ? $data['combined_type'] : null;
        $this->container['combined_type_tree'] = isset($data['combined_type_tree']) ? $data['combined_type_tree'] : null;
        $this->container['leaf_type'] = isset($data['leaf_type']) ? $data['leaf_type'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['datasource'] = isset($data['datasource']) ? $data['datasource'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['campaign_tag'] = isset($data['campaign_tag']) ? $data['campaign_tag'] : null;
        $this->container['profile_tag'] = isset($data['profile_tag']) ? $data['profile_tag'] : null;
        $this->container['all_tag'] = isset($data['all_tag']) ? $data['all_tag'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['facets'] = isset($data['facets']) ? $data['facets'] : null;
        $this->container['scoring_tag'] = isset($data['scoring_tag']) ? $data['scoring_tag'] : null;
        $this->container['search_text'] = isset($data['search_text']) ? $data['search_text'] : null;
        $this->container['search_fields'] = isset($data['search_fields']) ? $data['search_fields'] : null;
        $this->container['select'] = isset($data['select']) ? $data['select'] : null;
        $this->container['current_page'] = isset($data['current_page']) ? $data['current_page'] : null;
        $this->container['results_per_page'] = isset($data['results_per_page']) ? $data['results_per_page'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_tree
     *
     * @return string[]
     */
    public function getCategoryTree()
    {
        return $this->container['category_tree'];
    }

    /**
     * Sets category_tree
     *
     * @param string[] $category_tree category_tree
     *
     * @return $this
     */
    public function setCategoryTree($category_tree)
    {
        $this->container['category_tree'] = $category_tree;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[] $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets contained_in_place
     *
     * @return string[]
     */
    public function getContainedInPlace()
    {
        return $this->container['contained_in_place'];
    }

    /**
     * Sets contained_in_place
     *
     * @param string[] $contained_in_place contained_in_place
     *
     * @return $this
     */
    public function setContainedInPlace($contained_in_place)
    {
        $this->container['contained_in_place'] = $contained_in_place;

        return $this;
    }

    /**
     * Gets address_locality
     *
     * @return string[]
     */
    public function getAddressLocality()
    {
        return $this->container['address_locality'];
    }

    /**
     * Sets address_locality
     *
     * @param string[] $address_locality address_locality
     *
     * @return $this
     */
    public function setAddressLocality($address_locality)
    {
        $this->container['address_locality'] = $address_locality;

        return $this;
    }

    /**
     * Gets address_postal_code
     *
     * @return string[]
     */
    public function getAddressPostalCode()
    {
        return $this->container['address_postal_code'];
    }

    /**
     * Sets address_postal_code
     *
     * @param string[] $address_postal_code address_postal_code
     *
     * @return $this
     */
    public function setAddressPostalCode($address_postal_code)
    {
        $this->container['address_postal_code'] = $address_postal_code;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string[]
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string[] $time time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string[]
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string[] $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets rating_condition
     *
     * @return string[]
     */
    public function getRatingCondition()
    {
        return $this->container['rating_condition'];
    }

    /**
     * Sets rating_condition
     *
     * @param string[] $rating_condition rating_condition
     *
     * @return $this
     */
    public function setRatingCondition($rating_condition)
    {
        $this->container['rating_condition'] = $rating_condition;

        return $this;
    }

    /**
     * Gets rating_difficulty
     *
     * @return string[]
     */
    public function getRatingDifficulty()
    {
        return $this->container['rating_difficulty'];
    }

    /**
     * Sets rating_difficulty
     *
     * @param string[] $rating_difficulty rating_difficulty
     *
     * @return $this
     */
    public function setRatingDifficulty($rating_difficulty)
    {
        $this->container['rating_difficulty'] = $rating_difficulty;

        return $this;
    }

    /**
     * Gets elevation_ascent
     *
     * @return string[]
     */
    public function getElevationAscent()
    {
        return $this->container['elevation_ascent'];
    }

    /**
     * Sets elevation_ascent
     *
     * @param string[] $elevation_ascent elevation_ascent
     *
     * @return $this
     */
    public function setElevationAscent($elevation_ascent)
    {
        $this->container['elevation_ascent'] = $elevation_ascent;

        return $this;
    }

    /**
     * Gets elevation_descent
     *
     * @return string[]
     */
    public function getElevationDescent()
    {
        return $this->container['elevation_descent'];
    }

    /**
     * Sets elevation_descent
     *
     * @param string[] $elevation_descent elevation_descent
     *
     * @return $this
     */
    public function setElevationDescent($elevation_descent)
    {
        $this->container['elevation_descent'] = $elevation_descent;

        return $this;
    }

    /**
     * Gets elevation_min_altitude
     *
     * @return string[]
     */
    public function getElevationMinAltitude()
    {
        return $this->container['elevation_min_altitude'];
    }

    /**
     * Sets elevation_min_altitude
     *
     * @param string[] $elevation_min_altitude elevation_min_altitude
     *
     * @return $this
     */
    public function setElevationMinAltitude($elevation_min_altitude)
    {
        $this->container['elevation_min_altitude'] = $elevation_min_altitude;

        return $this;
    }

    /**
     * Gets elevation_max_altitude
     *
     * @return string[]
     */
    public function getElevationMaxAltitude()
    {
        return $this->container['elevation_max_altitude'];
    }

    /**
     * Sets elevation_max_altitude
     *
     * @param string[] $elevation_max_altitude elevation_max_altitude
     *
     * @return $this
     */
    public function setElevationMaxAltitude($elevation_max_altitude)
    {
        $this->container['elevation_max_altitude'] = $elevation_max_altitude;

        return $this;
    }

    /**
     * Gets season
     *
     * @return string[]
     */
    public function getSeason()
    {
        return $this->container['season'];
    }

    /**
     * Sets season
     *
     * @param string[] $season season
     *
     * @return $this
     */
    public function setSeason($season)
    {
        $this->container['season'] = $season;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string[]
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string[] $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets combined_type
     *
     * @return string[]
     */
    public function getCombinedType()
    {
        return $this->container['combined_type'];
    }

    /**
     * Sets combined_type
     *
     * @param string[] $combined_type combined_type
     *
     * @return $this
     */
    public function setCombinedType($combined_type)
    {
        $this->container['combined_type'] = $combined_type;

        return $this;
    }

    /**
     * Gets combined_type_tree
     *
     * @return string[]
     */
    public function getCombinedTypeTree()
    {
        return $this->container['combined_type_tree'];
    }

    /**
     * Sets combined_type_tree
     *
     * @param string[] $combined_type_tree combined_type_tree
     *
     * @return $this
     */
    public function setCombinedTypeTree($combined_type_tree)
    {
        $this->container['combined_type_tree'] = $combined_type_tree;

        return $this;
    }

    /**
     * Gets leaf_type
     *
     * @return string[]
     */
    public function getLeafType()
    {
        return $this->container['leaf_type'];
    }

    /**
     * Sets leaf_type
     *
     * @param string[] $leaf_type leaf_type
     *
     * @return $this
     */
    public function setLeafType($leaf_type)
    {
        $this->container['leaf_type'] = $leaf_type;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return string[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param string[] $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets datasource
     *
     * @return string[]
     */
    public function getDatasource()
    {
        return $this->container['datasource'];
    }

    /**
     * Sets datasource
     *
     * @param string[] $datasource datasource
     *
     * @return $this
     */
    public function setDatasource($datasource)
    {
        $this->container['datasource'] = $datasource;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string[]
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string[] $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets campaign_tag
     *
     * @return string[]
     */
    public function getCampaignTag()
    {
        return $this->container['campaign_tag'];
    }

    /**
     * Sets campaign_tag
     *
     * @param string[] $campaign_tag campaign_tag
     *
     * @return $this
     */
    public function setCampaignTag($campaign_tag)
    {
        $this->container['campaign_tag'] = $campaign_tag;

        return $this;
    }

    /**
     * Gets profile_tag
     *
     * @return string[]
     */
    public function getProfileTag()
    {
        return $this->container['profile_tag'];
    }

    /**
     * Sets profile_tag
     *
     * @param string[] $profile_tag profile_tag
     *
     * @return $this
     */
    public function setProfileTag($profile_tag)
    {
        $this->container['profile_tag'] = $profile_tag;

        return $this;
    }

    /**
     * Gets all_tag
     *
     * @return string[]
     */
    public function getAllTag()
    {
        return $this->container['all_tag'];
    }

    /**
     * Sets all_tag
     *
     * @param string[] $all_tag all_tag
     *
     * @return $this
     */
    public function setAllTag($all_tag)
    {
        $this->container['all_tag'] = $all_tag;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string[]
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string[] $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets facets
     *
     * @return \Infocenter\Client\Model\DsFacetRequest[]
     */
    public function getFacets()
    {
        return $this->container['facets'];
    }

    /**
     * Sets facets
     *
     * @param \Infocenter\Client\Model\DsFacetRequest[] $facets facets
     *
     * @return $this
     */
    public function setFacets($facets)
    {
        $this->container['facets'] = $facets;

        return $this;
    }

    /**
     * Gets scoring_tag
     *
     * @return string[]
     */
    public function getScoringTag()
    {
        return $this->container['scoring_tag'];
    }

    /**
     * Sets scoring_tag
     *
     * @param string[] $scoring_tag scoring_tag
     *
     * @return $this
     */
    public function setScoringTag($scoring_tag)
    {
        $this->container['scoring_tag'] = $scoring_tag;

        return $this;
    }

    /**
     * Gets search_text
     *
     * @return string
     */
    public function getSearchText()
    {
        return $this->container['search_text'];
    }

    /**
     * Sets search_text
     *
     * @param string $search_text search_text
     *
     * @return $this
     */
    public function setSearchText($search_text)
    {
        $this->container['search_text'] = $search_text;

        return $this;
    }

    /**
     * Gets search_fields
     *
     * @return string
     */
    public function getSearchFields()
    {
        return $this->container['search_fields'];
    }

    /**
     * Sets search_fields
     *
     * @param string $search_fields search_fields
     *
     * @return $this
     */
    public function setSearchFields($search_fields)
    {
        $this->container['search_fields'] = $search_fields;

        return $this;
    }

    /**
     * Gets select
     *
     * @return string
     */
    public function getSelect()
    {
        return $this->container['select'];
    }

    /**
     * Sets select
     *
     * @param string $select select
     *
     * @return $this
     */
    public function setSelect($select)
    {
        $this->container['select'] = $select;

        return $this;
    }

    /**
     * Gets current_page
     *
     * @return int
     */
    public function getCurrentPage()
    {
        return $this->container['current_page'];
    }

    /**
     * Sets current_page
     *
     * @param int $current_page current_page
     *
     * @return $this
     */
    public function setCurrentPage($current_page)
    {
        $this->container['current_page'] = $current_page;

        return $this;
    }

    /**
     * Gets results_per_page
     *
     * @return int
     */
    public function getResultsPerPage()
    {
        return $this->container['results_per_page'];
    }

    /**
     * Sets results_per_page
     *
     * @param int $results_per_page results_per_page
     *
     * @return $this
     */
    public function setResultsPerPage($results_per_page)
    {
        $this->container['results_per_page'] = $results_per_page;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
