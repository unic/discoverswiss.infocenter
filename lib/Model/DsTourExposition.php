<?php
/**
 * DsTourExposition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infocenter-TEST-V2
 *
 * Infocenter API test-v2
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infocenter\Client\Model;

use \ArrayAccess;
use \Infocenter\Client\ObjectSerializer;

/**
 * DsTourExposition Class Doc Comment
 *
 * @category Class
 * @package  Infocenter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsTourExposition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TourExposition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nn' => 'bool',
'ne' => 'bool',
'nw' => 'bool',
'ee' => 'bool',
'ss' => 'bool',
'se' => 'bool',
'sw' => 'bool',
'ww' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nn' => null,
'ne' => null,
'nw' => null,
'ee' => null,
'ss' => null,
'se' => null,
'sw' => null,
'ww' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nn' => 'nn',
'ne' => 'ne',
'nw' => 'nw',
'ee' => 'ee',
'ss' => 'ss',
'se' => 'se',
'sw' => 'sw',
'ww' => 'ww'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nn' => 'setNn',
'ne' => 'setNe',
'nw' => 'setNw',
'ee' => 'setEe',
'ss' => 'setSs',
'se' => 'setSe',
'sw' => 'setSw',
'ww' => 'setWw'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nn' => 'getNn',
'ne' => 'getNe',
'nw' => 'getNw',
'ee' => 'getEe',
'ss' => 'getSs',
'se' => 'getSe',
'sw' => 'getSw',
'ww' => 'getWw'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nn'] = isset($data['nn']) ? $data['nn'] : null;
        $this->container['ne'] = isset($data['ne']) ? $data['ne'] : null;
        $this->container['nw'] = isset($data['nw']) ? $data['nw'] : null;
        $this->container['ee'] = isset($data['ee']) ? $data['ee'] : null;
        $this->container['ss'] = isset($data['ss']) ? $data['ss'] : null;
        $this->container['se'] = isset($data['se']) ? $data['se'] : null;
        $this->container['sw'] = isset($data['sw']) ? $data['sw'] : null;
        $this->container['ww'] = isset($data['ww']) ? $data['ww'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nn
     *
     * @return bool
     */
    public function getNn()
    {
        return $this->container['nn'];
    }

    /**
     * Sets nn
     *
     * @param bool $nn North
     *
     * @return $this
     */
    public function setNn($nn)
    {
        $this->container['nn'] = $nn;

        return $this;
    }

    /**
     * Gets ne
     *
     * @return bool
     */
    public function getNe()
    {
        return $this->container['ne'];
    }

    /**
     * Sets ne
     *
     * @param bool $ne North-east
     *
     * @return $this
     */
    public function setNe($ne)
    {
        $this->container['ne'] = $ne;

        return $this;
    }

    /**
     * Gets nw
     *
     * @return bool
     */
    public function getNw()
    {
        return $this->container['nw'];
    }

    /**
     * Sets nw
     *
     * @param bool $nw North-west
     *
     * @return $this
     */
    public function setNw($nw)
    {
        $this->container['nw'] = $nw;

        return $this;
    }

    /**
     * Gets ee
     *
     * @return bool
     */
    public function getEe()
    {
        return $this->container['ee'];
    }

    /**
     * Sets ee
     *
     * @param bool $ee East
     *
     * @return $this
     */
    public function setEe($ee)
    {
        $this->container['ee'] = $ee;

        return $this;
    }

    /**
     * Gets ss
     *
     * @return bool
     */
    public function getSs()
    {
        return $this->container['ss'];
    }

    /**
     * Sets ss
     *
     * @param bool $ss South
     *
     * @return $this
     */
    public function setSs($ss)
    {
        $this->container['ss'] = $ss;

        return $this;
    }

    /**
     * Gets se
     *
     * @return bool
     */
    public function getSe()
    {
        return $this->container['se'];
    }

    /**
     * Sets se
     *
     * @param bool $se South-east
     *
     * @return $this
     */
    public function setSe($se)
    {
        $this->container['se'] = $se;

        return $this;
    }

    /**
     * Gets sw
     *
     * @return bool
     */
    public function getSw()
    {
        return $this->container['sw'];
    }

    /**
     * Sets sw
     *
     * @param bool $sw South-west
     *
     * @return $this
     */
    public function setSw($sw)
    {
        $this->container['sw'] = $sw;

        return $this;
    }

    /**
     * Gets ww
     *
     * @return bool
     */
    public function getWw()
    {
        return $this->container['ww'];
    }

    /**
     * Sets ww
     *
     * @param bool $ww West
     *
     * @return $this
     */
    public function setWw($ww)
    {
        $this->container['ww'] = $ww;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
